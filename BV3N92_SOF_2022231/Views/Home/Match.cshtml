@using Microsoft.AspNetCore.Identity
@inject SignInManager<SiteUser> SignInManager
@inject UserManager<SiteUser> UserManager
@model UserManager<SiteUser>

@{
	var currentUser = await UserManager.GetUserAsync(User);
	var availableUsers = UserManager.Users
		.Where(u => u.Id != currentUser.Id)
		.AsEnumerable()
		.Where(u => currentUser.LikedUsers.All(l => l.WhoLikedId != u.Id) && currentUser.DislikedUsers.All(d => d.WhoDislikedId != u.Id))
		.ToList();

	
	List<string> userHobbies = new List<string>();
	foreach (var hobby in currentUser.Hobbies)
	{
		if (hobby.IsChecked)
		{
			userHobbies.Add(hobby.Name);
		}
	}

	int ageDiff;
	double score;
	List<Tuple<double, SiteUser>> judgedUsers = new List<Tuple<double, SiteUser>>();
	foreach (var user in availableUsers)
	{
		score = 0;
		foreach (var hobby in user.Hobbies)
		{
			if (hobby.IsChecked && userHobbies.FirstOrDefault(t => t == hobby.Name) != null)
			{
				++score;
			}
		}
		ageDiff = Math.Abs(currentUser.Age - user.Age);
		score -= ageDiff * 0.25;
		judgedUsers.Add(new Tuple<double, SiteUser>(score, user));
	}
	judgedUsers = judgedUsers.OrderBy(t => t.Item1).Reverse().ToList();

	List<SiteUser> orderedUsers = new List<SiteUser>();
	for (int i = 0; i < judgedUsers.Count; i++)
	{
		orderedUsers.Add(judgedUsers[i].Item2);
	}

	var match = orderedUsers.FirstOrDefault();
}
<body>
	<header>
		<nav class="navbar navbar-expand-lg navbar-light">
			<div class="container-fluid">
				<h1>
					<a class="btn-link text-white" asp-area="" asp-controller="Home" asp-action="Index">UniSex</a>
				</h1>
				<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
						aria-expanded="false" aria-label="Toggle navigation">
					<span class="navbar-toggler-icon"></span>
				</button>
				<div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
					<ul class="navbar-nav flex-grow-1">
						<li class="nav-item">

						</li>
					</ul>
					<partial name="_LoginPartial" />
				</div>
			</div>
		</nav>
	</header>
	@if (availableUsers.Count > 0)
	{
		<div class="col d-flex justify-content-center">
			<h1 style="color:white">@match.FirstName Profil</h1>
		</div>
		<br />
		<br />
		<div class="col d-flex justify-content-center">
			@foreach (var picture in match.Pictures)
			{
				<div class="hoverprofil">
					<div class="card" style="width:10rem; height:fit-content; border-width:2px; margin:10px; object-fit: fill;">
						<img class="card-img-top" src="@picture.PhotoUrl" alt="Card image cap">
					</div>
				</div>
			}

			<div class="hoverprofil">
				<div class="card" style="width:10rem; height:fit-content; border-width:2px; margin:10px; object-fit: fill;">
					<img class="card-img-top" src="@match.ProfilePictureUrl" alt="Card image cap">
				</div>
			</div>
		</div>

		<br />
		<br />
		<div class="col d-flex justify-content-center">
			<div class="card" style="width: 18rem;">
				<div class="card-body">
					<h5 class="card-title">@match.Gender</h5>
					<h6 class="card-subtitle mb-2 text-muted">@match.Age</h6>
					<p class="card-text">@match.Bio</p>
					<a href="/Home/DislikeUser?userId=@match.Id" class="btn btn-danger">Dislike</a>
					<a href="/Home/LikeUser?userId=@match.Id" class="btn btn-success">Like</a>
				</div>
			</div>
		</div>
	}
	else{
	<div class="col d-flex justify-content-center">
		<div class="card" style="width: 18rem;">
			<div class="card-body">
				<h5 class="card-title">Currently there are no available cards...</h5>
			</div>
		</div>
	</div>
	}
</body>
